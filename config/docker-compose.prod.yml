services:
  rollup:
    build:
      context: ../
      dockerfile: ./config/Dockerfile.rollup
    volumes: 
      - ../dist:/app/dist
      - ../src:/app/src
    entrypoint: ["bun", "run", "build"]

  postgres-prod:
    image: postgres:17
    ports:
      - "${PGPORT}:${PGPORT}"
    environment:
      - POSTGRES_USER=${PGUSER}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_DB=${PGDATABASE}
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  pgmigrations:
    build:
      context: ../
      dockerfile: ./config/Dockerfile.pgmigrations
    environment:
      - PGHOST=postgres-prod
      - PGPORT=${PGPORT}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
      - APP_USER=${APP_USER}
      - APP_PASSWORD=${APP_PASSWORD}
      - SKIP_PATTERN=scrap|TESTS
      - SYS_ENV=production
    entrypoint: [ "pgmigrations", "up" ]
    depends_on:
      postgres-prod:
        condition: service_healthy
    networks:
      - app-network

  worker:
    build:
      context: ../
      dockerfile: ./worker/Dockerfile
    environment:
      - PGHOST=postgres-prod
      - PGPORT=${PGPORT}
      - PGUSER=${WORKER_USER}
      - PGPASSWORD=${WORKER_PASSWORD}
      - PGDATABASE=${PGDATABASE}
      - APP_URL=https://set_production_url_here
    depends_on:
        pgmigrations:
          condition: service_completed_successfully
    networks:
      - app-network

  pgbouncer:
    image: edoburu/pgbouncer:latest
    environment:
      - DB_HOST=postgres-prod
      - DB_NAME=${PGDATABASE}
      - DB_PORT=${PGPORT}
      - DB_USER=${APP_USER}
      - DB_PASSWORD=${APP_PASSWORD}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=1000
      - DEFAULT_POOL_SIZE=20
      - RESERVE_POOL_SIZE=10
      - QUERY_WAIT_TIMEOUT=120
      - ADMIN_USERS=${APP_USER}
      - AUTH_TYPE=scram-sha-256
    depends_on:
      pgmigrations:
        condition: service_completed_successfully
    networks:
      - app-network

  npgsqlrest:
    build:
      context: ../
      dockerfile: ./config/Dockerfile.npgsqlrest
    environment:
      - PGHOST=pgbouncer
      - PGPORT=${PGPORT}
      - PGDATABASE=${PGDATABASE}
      - PGUSER=${APP_USER}
      - PGPASSWORD=${APP_PASSWORD}
    volumes:
      - ../logs:/app/logs
      - ../dist:/app/dist
    ports:
      - "5000:5000"
    depends_on:
      pgbouncer:
        condition: service_started
      rollup:
        condition: service_completed_successfully
    networks:
      - app-network

  nginx:
    image: nginx:stable-alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../dist:/usr/share/nginx/html
      # For SSL certificates if needed
      # - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - npgsqlrest
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: