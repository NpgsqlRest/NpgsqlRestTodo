services:
  postgres-dev:
    image: postgres:17
    ports:
      - "${PGPORT}:${PGPORT}"
    environment:
      - POSTGRES_USER=${PGUSER}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_DB=${PGDATABASE}
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data

  pgmigrations:
    build:
      context: ../
      dockerfile: ./config/Dockerfile.pgmigrations
    environment:
      - PGHOST=postgres-dev
      - PGPORT=${PGPORT}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
      - APP_USER=${APP_USER}
      - APP_PASSWORD=${APP_PASSWORD}
      - SKIP_PATTERN=scrap
    entrypoint: [ "pgmigrations", "up" ]
    depends_on:
      postgres-dev:
        condition: service_healthy

  npgsqlrest-dev:
    build:
      context: ../
      dockerfile: ./config/Dockerfile.npgsqlrest.dev
    environment:
      - PGHOST=postgres-dev
      - PGPORT=${PGPORT}
      - PGDATABASE=${PGDATABASE}
      - PGUSER=${APP_USER}
      - PGPASSWORD=${APP_PASSWORD}
    volumes:
      - ../logs:/app/logs
      - ../http:/app/http
      - ../src/api:/app/src/api
      - ../dist:/app/dist
    ports:
      - "5000:5000"
    depends_on:
        pgmigrations:
          condition: service_completed_successfully

  worker:
    build:
      context: ../
      dockerfile: ./worker/Dockerfile
    environment:
      - PGHOST=postgres-dev
      - PGPORT=${PGPORT}
      - PGUSER=${WORKER_USER}
      - PGPASSWORD=${WORKER_PASSWORD}
      - PGDATABASE=${PGDATABASE}
      - APP_URL=http://127.0.0.1:5000
    depends_on:
        pgmigrations:
          condition: service_completed_successfully

volumes:
  postgres_data_dev: