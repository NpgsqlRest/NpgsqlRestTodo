// autogenerated at 2025-04-09T10:10:42.8222734+00:00
import { baseUrl } from "./_urls";

export const authConfirmEmailCodeUrl = () => baseUrl + "/api/auth/confirm-email-code";
export const authLoginUrl = () => baseUrl + "/api/auth/login";
export const authRegisterUrl = () => baseUrl + "/api/auth/register";

/**
* function auth.confirm_email_code(
*     _code text,
*     _email text,
*     _analytics_data jsonb DEFAULT '{}'::jsonb,
*     _ip_address text DEFAULT NULL::text
* )
* returns record
* 
* @remarks
* comment on function auth.confirm_email_code is 'HTTP POST
* Anonymous
* Login';
* 
* @see FUNCTION auth.confirm_email_code
*/
export async function authConfirmEmailCode(
    request: IAuthConfirmEmailCodeRequest,
    parseUrl: (url: string) => string = url=>url,
    parseRequest: (request: RequestInit) => RequestInit = request=>request
) : Promise<{status: number, response: string}> {
    const response = await fetch(parseUrl(authConfirmEmailCodeUrl()), parseRequest({
        method: "POST",
        body: JSON.stringify(request)
    }));
    return {
        status: response.status,
        response: await response.text()
    };
}

/**
* function auth.login(
*     _username text,
*     _password text,
*     _analytics_data jsonb DEFAULT '{}'::jsonb,
*     _ip_address text DEFAULT NULL::text
* )
* returns record
* 
* @remarks
* comment on function auth.login is 'HTTP POST
* Login
* Anonymous';
* 
* @see FUNCTION auth.login
*/
export async function authLogin(
    request: IAuthLoginRequest,
    parseUrl: (url: string) => string = url=>url,
    parseRequest: (request: RequestInit) => RequestInit = request=>request
) : Promise<{status: number, response: string}> {
    const response = await fetch(parseUrl(authLoginUrl()), parseRequest({
        method: "POST",
        body: JSON.stringify(request)
    }));
    return {
        status: response.status,
        response: await response.text()
    };
}

/**
* function auth.register(
*     _email text,
*     _password text,
*     _repeat text,
*     _analytics_data jsonb DEFAULT '{}'::jsonb,
*     _ip_address text DEFAULT NULL::text
* )
* returns record
* 
* @remarks
* comment on function auth.register is 'HTTP POST
* Anonymous';
* 
* @see FUNCTION auth.register
*/
export async function authRegister(
    request: IAuthRegisterRequest,
    parseUrl: (url: string) => string = url=>url,
    parseRequest: (request: RequestInit) => RequestInit = request=>request
) : Promise<{status: number, response: IAuthRegisterResponse | string}> {
    const response = await fetch(parseUrl(authRegisterUrl()), parseRequest({
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(request)
    }));
    return {
        status: response.status,
        response: response.status == 200 ? await response.json() as IAuthRegisterResponse : await response.text()
    };
}
