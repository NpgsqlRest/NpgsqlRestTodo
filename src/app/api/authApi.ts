// autogenerated at 2025-08-29T07:40:33.9779080+00:00

import { baseUrl } from "$lib/urls";

export const authConfirmEmailUrl = () => baseUrl + "/api/auth/confirm-email";
export const authLoginUrl = () => baseUrl + "/api/auth/login";
export const authLogoutUrl = () => baseUrl + "/api/auth/logout";
export const authPasswordResetUrl = () => baseUrl + "/api/auth/password-reset";
export const authPasswordResetCodeUrl = () => baseUrl + "/api/auth/password-reset-code";
export const authPasswordResetStartUrl = () => baseUrl + "/api/auth/password-reset-start";
export const authRegisterUrl = () => baseUrl + "/api/auth/register";

/**
* function auth.confirm_email(
*     _code text,
*     _email text,
*     _analytics jsonb DEFAULT '{}'::jsonb
* )
* returns record
* 
* @remarks
* comment on function auth.confirm_email is 'HTTP POST
* anonymous
* login';
* 
* @param {IAuthConfirmEmailRequest} request
* @returns {{status: number, response: string}}
* 
* @see FUNCTION auth.confirm_email
*/
export async function authConfirmEmail(
    request: IAuthConfirmEmailRequest
) : Promise<{status: number, response: string}> {
    const response = await fetch(authConfirmEmailUrl(), {
        method: "POST",
        body: JSON.stringify(request)
    });
    return {
        status: response.status,
        response: await response.text()
    };
}

/**
* function auth.login(
*     _username text,
*     _password text,
*     _analytics jsonb DEFAULT '{}'::jsonb
* )
* returns record
* 
* @remarks
* comment on function auth.login is 'HTTP POST
* login
* anonymous';
* 
* @param {IAuthLoginRequest} request
* @returns {{status: number, response: string}}
* 
* @see FUNCTION auth.login
*/
export async function authLogin(
    request: IAuthLoginRequest
) : Promise<{status: number, response: string}> {
    const response = await fetch(authLoginUrl(), {
        method: "POST",
        body: JSON.stringify(request)
    });
    return {
        status: response.status,
        response: await response.text()
    };
}

/**
* procedure auth.logout(
*     _analytics jsonb DEFAULT '{}'::jsonb
* )
* returns void
* 
* @remarks
* comment on function auth.logout is 'HTTP POST
* anonymous
* logout
* security_sensitive';
* 
* @param {IAuthLogoutRequest} request
* @returns {number}
* 
* @see PROCEDURE auth.logout
*/
export async function authLogout(
    request: IAuthLogoutRequest
) : Promise<number> {
    const response = await fetch(authLogoutUrl(), {
        method: "POST",
        body: JSON.stringify(request)
    });
    return response.status;
}

/**
* function auth.password_reset(
*     _code text,
*     _token text,
*     _email text,
*     _password text,
*     _repeat text,
*     _analytics jsonb DEFAULT '{}'::jsonb,
*     _hash text DEFAULT NULL::text
* )
* returns record
* 
* @remarks
* comment on function auth.password_reset is 'HTTP POST
* anonymous
* security_sensitive
* parameter _hash is hash of _password';
* 
* @param {IAuthPasswordResetRequest} request
* @returns {{status: number, response: IAuthPasswordResetResponse | string}}
* 
* @see FUNCTION auth.password_reset
*/
export async function authPasswordReset(
    request: IAuthPasswordResetRequest
) : Promise<{status: number, response: IAuthPasswordResetResponse | string}> {
    const response = await fetch(authPasswordResetUrl(), {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(request)
    });
    return {
        status: response.status,
        response: response.status == 200 ? await response.json() as IAuthPasswordResetResponse : await response.text()
    };
}

/**
* function auth.password_reset_code(
*     _email text,
*     _analytics jsonb
* )
* returns text
* 
* @remarks
* comment on function auth.password_reset_code is 'HTTP POST
* anonymous
* security_sensitive';
* 
* @param {IAuthPasswordResetCodeRequest} request
* @returns {{status: number, response: string}}
* 
* @see FUNCTION auth.password_reset_code
*/
export async function authPasswordResetCode(
    request: IAuthPasswordResetCodeRequest
) : Promise<{status: number, response: string}> {
    const response = await fetch(authPasswordResetCodeUrl(), {
        method: "POST",
        body: JSON.stringify(request)
    });
    return {
        status: response.status,
        response: await response.text()
    };
}

/**
* function auth.password_reset_start(
*     _code text,
*     _email text,
*     _token text,
*     _timezone text,
*     _analytics jsonb DEFAULT '{}'::jsonb
* )
* returns text
* 
* @remarks
* comment on function auth.password_reset_start is 'HTTP POST
* anonymous
* security_sensitive';
* 
* @param {IAuthPasswordResetStartRequest} request
* @returns {{status: number, response: string}}
* 
* @see FUNCTION auth.password_reset_start
*/
export async function authPasswordResetStart(
    request: IAuthPasswordResetStartRequest
) : Promise<{status: number, response: string}> {
    const response = await fetch(authPasswordResetStartUrl(), {
        method: "POST",
        body: JSON.stringify(request)
    });
    return {
        status: response.status,
        response: await response.text()
    };
}

/**
* function auth.register(
*     _email text,
*     _password text,
*     _repeat text,
*     _analytics jsonb DEFAULT '{}'::jsonb,
*     _hash text DEFAULT NULL::text
* )
* returns record
* 
* @remarks
* comment on function auth.register is 'HTTP POST
* anonymous
* security_sensitive
* parameter _hash is hash of _password';
* 
* @param {IAuthRegisterRequest} request
* @returns {{status: number, response: IAuthRegisterResponse | string}}
* 
* @see FUNCTION auth.register
*/
export async function authRegister(
    request: IAuthRegisterRequest
) : Promise<{status: number, response: IAuthRegisterResponse | string}> {
    const response = await fetch(authRegisterUrl(), {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(request)
    });
    return {
        status: response.status,
        response: response.status == 200 ? await response.json() as IAuthRegisterResponse : await response.text()
    };
}
